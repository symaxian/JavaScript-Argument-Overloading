//
//  Argument Overloading Readme
//_______________________________//


Defines two functions that each overload a number of "sub-functions" sent to them.

overloadArgumentCount(functions[,debugName])
	Creates and returns an overloaded function that calls one of the sub-functions depending on the number of arguments sent to the overloaded function.
	If specified, the debug name will be given in any error messages the function throws.

overloadArgumentType(functions[,debugName])
	Creates and returns an overloaded function that calls one of the sub-functions depending on the type of the first argument sent to the overloaded function.
	If specified, the debug name will be given in any error messages the function throws.

Both functions hold a single boolean property that enables/disables checking the sub-functions on the returned overloaded functions.

	overloadArgumentCount.verifySubFunctions
	overloadArgumentType.verifySubFunctions

	The default value for both is true.
	If true then the overloaded function will check that there is a sub-function for the argument count/type before calling it.
	If a sub-function for the argument count/type does not exist then a TypeError is thrown.



//
//  Count Example
//_________________//


Person = function(){
	this.init.apply(this,arguments);
};

Person.prototype = {

	name:'John Doe',

	age:24,

	gender:'male',

	init:overloadArgumentCount({

		0:function(){
			throw new TypeError('Person initiated with no properties.');
		},

		1:function(name){
			this.name = name;
		},

		2:function(name,age){
			this.name = name;
			this.age = age;
		},

		3:function(name,age,gender){
			this.name = name;
			this.age = age;
			this.gender = gender;
		}

	})

};

The above code creates a small person class with 3 properties that can be constructed in 3 ways through the overloaded init method.
Constructor functions themselves cannot be overloaded in this manner, however there is a workaround shown above in the Person class.



//
//  Type Example
//________________//


whatTypeIsIt = overloadArgumentType({

	'undefined':function(){
		return 'No variable sent.';
	},

	'boolean':function(){
		return 'Its a boolean!';
	},

	'number':function(){
		return 'Its a number, or maybe its not.';
	},

	'object':function(){
		return 'Its either an object, an array, or maybe null.';
	},

	'function':function(){
		return 'Hey its another function, I wonder if its overloaded too?'
	}

},'whatTypeIsIt');

Here the function called depends on the "typeof" the first argument sent to the overloaded function.
Note that a debug name is given to the overloaded function.
Therefore if a function does not exist for the type of the first argument and the function was constructed when the verifySubFunctions flag was true, then the error thrown will give the debug name in the message.
So if we called whatTypeIsIt with a string like so "whatTypeIsIt('lol')" then an error such as the one below would be thrown.

	TypeError: Overloaded function "whatTypeIsIt" has no sub-function available for argument type: string



//
//  Modification
//________________//


Sub-functions can also be added or removed after the overloaded function has been created, just add or remove the sub-functions to/from the functions member of the overloaded function.

For example, if we wanted the Person class' init method to also take 4 arguments, we could do this:

Person.prototype.init.functions['4'] = function(name,age,gender,location){
	this.name = name;
	this.age = age;
	this.gender = gender;
	this.location = location;
}

And to delete the init method that takes 0 arguments, just do:

delete Person.prototype.init.functions['0'];
